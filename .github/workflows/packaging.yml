# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Packaging

on:
  pull_request:
    branches:
      - main
    paths:
      - "adbc.h"
      - "c/**"
      - "ci/**"
      - "glib/**"
      - "python/**"
      - "ruby/**"
      - ".github/workflows/packaging.yml"

  push:
    # Automatically build on RC tags
    branches-ignore:
      - '**'
    tags:
      - 'apache-arrow-adbc-*-rc*'
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload artifacts to Gemfury"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  source:
    name: Source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Prepare version
        shell: bash
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            VERSION=${GITHUB_REF_NAME#apache-arrow-adbc-}
            VERSION=${VERSION%-rc*}
          else
            VERSION=$(grep 'set(ADBC_VERSION' c/cmake_modules/AdbcVersion.cmake | \
                        grep -E -o '[0-9]+\.[0-9]+\.[0-9]+')
            description=$(git describe \
                            --always \
                            --dirty \
                            --long \
                            --match "apache-arrow-adbc-[0-9]*.*" \
                            --tags)
            case "${description}" in
              # apache-arrow-adbc-0.1.0-10-1234567-dirty
              apache-arrow-adbc-*)
                # 10-1234567-dirty
                distance="${description#apache-arrow-adbc-*.*.*-}"
                # 10-1234567
                distance="${distance%-dirty}"
                # 10
                distance="${distance%-*}"
                ;;
              *)
                distance=$(git log --format=oneline | wc -l)
                ;;
            esac
            VERSION="${VERSION}.dev${distance}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create archive
        shell: bash
        run: |
          ci/scripts/source_build.sh \
            apache-arrow-adbc-${VERSION} \
            $(git log -n 1 --format=%h)

      - uses: actions/upload-artifact@v3
        with:
          name: source
          retention-days: 7
          path: |
            apache-arrow-adbc-${{ env.VERSION }}.tar.gz

  python-conda-linux:
    name: "Python ${{ matrix.arch }} Conda"
    runs-on: ubuntu-latest
    needs:
      - source
    strategy:
      fail-fast: false
      matrix:
        # TODO: "linux_aarch64_"
        arch: ["linux_64_"]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source

      - name: Extract source archive
        run: |
          source_archive=$(echo apache-arrow-adbc-*.tar.gz)
          VERSION=${source_archive#apache-arrow-adbc-}
          VERSION=${VERSION%.tar.gz}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          tar xf apache-arrow-adbc-${VERSION}.tar.gz
          mv apache-arrow-adbc-${VERSION} adbc

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ github.event.inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Build Conda package
        shell: bash
        env:
          ARCH_CONDA_FORGE: ${{ matrix.arch }}
        run: |
          pushd adbc
          docker-compose run \
            -e HOST_USER_ID=$(id -u) \
            python-conda
          popd

      - name: Archive Conda packages
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.arch }}-conda
          retention-days: 7
          path: |
            adbc/build/conda/*/*.tar.bz2

      - name: Test Conda packages
        if: matrix.arch == 'linux_64_'
        shell: bash
        env:
          ARCH_CONDA_FORGE: ${{ matrix.arch }}
        run: |
          pushd adbc
          docker-compose run \
            python-conda-test
          popd

  python-conda-macos:
    name: "Python ${{ matrix.arch }} Conda"
    runs-on: macos-latest
    needs:
      - source
    strategy:
      fail-fast: false
      matrix:
        arch: ["osx_64_", "osx_arm64_"]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source

      - name: Extract source archive
        run: |
          source_archive=$(echo apache-arrow-adbc-*.tar.gz)
          VERSION=${source_archive#apache-arrow-adbc-}
          VERSION=${VERSION%.tar.gz}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          tar xf apache-arrow-adbc-${VERSION}.tar.gz
          mv apache-arrow-adbc-${VERSION} adbc

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ github.event.inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-only-tar-bz2: false
          use-mamba: true

      - name: Install Dependencies
        shell: bash -l {0}
        run: |
          mamba install -c conda-forge boa conda-smithy conda-verify
          conda config --remove channels defaults
          conda config --add channels conda-forge

      - name: Build Conda package
        shell: bash -l {0}
        env:
          ARCH_CONDA_FORGE: ${{ matrix.arch }}
        run: |
          ./adbc/ci/scripts/python_conda_build.sh $(pwd)/adbc ${ARCH_CONDA_FORGE}.yaml $(pwd)/adbc/build

      - name: Archive Conda packages
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.arch }}-conda
          retention-days: 7
          path: |
            adbc/build/conda/*/*.tar.bz2

      - name: Test Conda packages
        shell: bash -l {0}
        if: matrix.arch == 'osx_64_'
        env:
          ARCH_CONDA_FORGE: ${{ matrix.arch }}
        run: |
          ./adbc/ci/scripts/python_conda_test.sh $(pwd)/adbc $(pwd)/adbc/build
