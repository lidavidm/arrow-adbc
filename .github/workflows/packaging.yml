# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Packaging

on:
  pull_request:
    branches:
      - main
    paths:
      - ".env"
      - "adbc.h"
      - "c/**"
      - "ci/**"
      - "glib/**"
      - "python/**"
      - "ruby/**"
      - ".github/workflows/packaging.yml"

  push:
    # Automatically build on RC tags
    branches-ignore:
      - "**"
    tags:
      - "apache-arrow-adbc-*-rc*"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload artifacts to Gemfury"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  source:
    name: Source
    runs-on: ubuntu-latest
    # For cron: only run on the main repo, not forks
    if: github.event_name != 'schedule' || github.repository == 'apache/arrow-adbc'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive

      # https://github.com/actions/checkout/issues/882
      - name: Update tags
        run: |
          git fetch --tags --force origin

      - name: Prepare version
        id: version
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            VERSION=${GITHUB_REF_NAME#apache-arrow-adbc-}
            VERSION=${VERSION%-rc*}
          else
            VERSION=$(grep 'set(ADBC_VERSION' c/cmake_modules/AdbcVersion.cmake | \
                        grep -E -o '[0-9]+\.[0-9]+\.[0-9]+')
            description=$(git describe \
                            --always \
                            --dirty \
                            --long \
                            --match "apache-arrow-adbc-[0-9]*.*" \
                            --tags)
            case "${description}" in
              # apache-arrow-adbc-0.1.0-10-1234567-dirty
              apache-arrow-adbc-*)
                # 10-1234567-dirty
                distance="${description#apache-arrow-adbc-*.*.*-}"
                # 10-1234567
                distance="${distance%-dirty}"
                # 10
                distance="${distance%-*}"
                ;;
              *)
                distance=$(git log --format=oneline | wc -l)
                ;;
            esac
            VERSION="${VERSION}.dev${distance}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create archive
        run: |
          ci/scripts/source_build.sh \
            apache-arrow-adbc-${{ steps.version.outputs.VERSION }} \
            $(git log -n 1 --format=%h)

      - uses: actions/upload-artifact@v3
        with:
          name: source
          retention-days: 7
          path: |
            apache-arrow-adbc-${{ steps.version.outputs.VERSION }}.tar.gz

  csharp:
    name: "C#/.NET"
    runs-on: ubuntu-latest
    needs:
      - source
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source

      - name: Extract source archive
        run: |
          source_archive=$(echo apache-arrow-adbc-*.tar.gz)
          VERSION=${source_archive#apache-arrow-adbc-}
          VERSION=${VERSION%.tar.gz}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          tar xf apache-arrow-adbc-${VERSION}.tar.gz
          mv apache-arrow-adbc-${VERSION} adbc

      - name: Show inputs
        run: |
          echo "upload_artifacts: ${{ inputs.upload_artifacts }}" >> $GITHUB_STEP_SUMMARY
          echo "schedule: ${{ github.event.schedule }}" >> $GITHUB_STEP_SUMMARY
          echo "ref: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

      - name: Package
        run: |
          pushd adbc/
          docker compose run csharp-dist
          popd

      - name: Archive nupkg
        uses: actions/upload-artifact@v3
        with:
          name: csharp
          retention-days: 7
          path: |
            adbc/csharp/artifacts/**/*.nupkg
            adbc/csharp/artifacts/**/*.snupkg

  release:
    name: "Create release"
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - csharp
      - source
    steps:
      - name: Get All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts
      - name: Release
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/*/}

          # Deduplicate wheels built in different jobs with same tag
          mkdir -p upload-staging
          find ./release-artifacts/ \
            '(' \
              -name docs.tgz -or \
              -name '*.jar' -or \
              -name '*.nupkg' -or \
              -name '*.snupkg' -or \
              -name '*.pom' -or \
              -name '*.whl' -or \
              -name 'adbc_*.tar.gz' -or \
              -name 'almalinux-*.tar.gz' -or \
              -name 'apache-arrow-adbc-*.tar.gz' -or \
              -name 'debian-*.tar.gz' -or \
              -name 'ubuntu-*.tar.gz' \
            ')' \
            -exec mv '{}' upload-staging \;

          UPLOAD=$(find upload-staging -type f | sort | uniq)

          echo "Uploading files:" >> $GITHUB_STEP_SUMMARY
          echo "${UPLOAD}" >> $GITHUB_STEP_SUMMARY

          gh release create "${RELEASE_TAG}" \
            --repo ${{ github.repository }} \
            --prerelease \
            --title "ADBC Libraries ${RELEASE_TAG}" \
            ${UPLOAD}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
